From e0929b719016cf7f4cfb6c10e6acc2da14add1f9 Mon Sep 17 00:00:00 2001
From: zhangguanzhang <zhangguanzhang@qq.com>
Date: Mon, 11 Mar 2024 18:23:20 +0800
Subject: [PATCH] support loong64

---
 build/build-image/Dockerfile                           |  6 ++++++
 build/lib/release.sh                                   |  1 -
 hack/lib/golang.sh                                     |  3 +++
 hack/lib/util.sh                                       |  5 ++++-
 hack/local-up-cluster.sh                               |  5 ++++-
 .../runc/libcontainer/system/syscall_linux_64.go       |  4 ++--
 vendor/go.etcd.io/bbolt/bolt_loong64.go                | 10 ++++++++++
 7 files changed, 29 insertions(+), 5 deletions(-)
 create mode 100644 vendor/go.etcd.io/bbolt/bolt_loong64.go

diff --git a/build/build-image/Dockerfile b/build/build-image/Dockerfile
index 4473935769b..ffed024bdb0 100644
--- a/build/build-image/Dockerfile
+++ b/build/build-image/Dockerfile
@@ -55,3 +55,9 @@ ADD rsyncd.password /
 RUN chmod a+r /rsyncd.password
 ADD rsyncd.sh /
 RUN chmod a+rx /rsyncd.sh
+
+ENV GOLANG_VERSION 1.21.5
+RUN rm -rf /usr/local/go; \
+     curl -O http://ftp.loongnix.cn/toolchain/golang/go-${GOLANG_VERSION%.*}/abi1.0/go${GOLANG_VERSION}.linux-amd64.tar.gz; \
+    tar zxf go*.linux-amd64.tar.gz -C /usr/local/; \
+    rm -f go*.linux-amd64.tar.gz
diff --git a/build/lib/release.sh b/build/lib/release.sh
index 5515b18f13a..2a24f94fcad 100644
--- a/build/lib/release.sh
+++ b/build/lib/release.sh
@@ -339,7 +339,6 @@ function kube::release::create_docker_images_for_server() {
         local build_log="${docker_build_path}/build.log"
         if ! DOCKER_CLI_EXPERIMENTAL=enabled "${DOCKER[@]}" buildx build \
           -f "${docker_file_path}" \
-          --platform linux/"${arch}" \
           --load ${docker_build_opts:+"${docker_build_opts}"} \
           -t "${docker_image_tag}" \
           --build-arg BASEIMAGE="${base_image}" \
diff --git a/hack/lib/golang.sh b/hack/lib/golang.sh
index 9e7f37b0895..c7e2536b1bb 100755
--- a/hack/lib/golang.sh
+++ b/hack/lib/golang.sh
@@ -26,6 +26,7 @@ readonly KUBE_SUPPORTED_SERVER_PLATFORMS=(
   linux/arm64
   linux/s390x
   linux/ppc64le
+  linux/loong64
 )
 
 # The node platforms we build for
@@ -34,6 +35,7 @@ readonly KUBE_SUPPORTED_NODE_PLATFORMS=(
   linux/arm64
   linux/s390x
   linux/ppc64le
+  linux/loong64
   windows/amd64
 )
 
@@ -44,6 +46,7 @@ readonly KUBE_SUPPORTED_CLIENT_PLATFORMS=(
   linux/386
   linux/arm
   linux/arm64
+  linux/loong64
   linux/s390x
   linux/ppc64le
   darwin/amd64
diff --git a/hack/lib/util.sh b/hack/lib/util.sh
index a6bc6aa04e9..c3b4b4a2632 100755
--- a/hack/lib/util.sh
+++ b/hack/lib/util.sh
@@ -185,8 +185,11 @@ kube::util::host_arch() {
     ppc64le*)
       host_arch=ppc64le
       ;;
+    loongarch64*)
+      host_arch=loong64
+      ;;
     *)
-      kube::log::error "Unsupported host arch. Must be x86_64, 386, arm, arm64, s390x or ppc64le."
+      kube::log::error "Unsupported host arch. Must be x86_64, 386, arm, arm64, s390x, loong64 or ppc64le."
       exit 1
       ;;
   esac
diff --git a/hack/local-up-cluster.sh b/hack/local-up-cluster.sh
index 09969f80901..9843c92f31b 100755
--- a/hack/local-up-cluster.sh
+++ b/hack/local-up-cluster.sh
@@ -305,8 +305,11 @@ function detect_binary {
       ppc64le*)
         host_arch=ppc64le
         ;;
+      loongarch64*)
+        host_arch=loong64
+        ;;
       *)
-        echo "Unsupported host arch. Must be x86_64, 386, arm, arm64, s390x or ppc64le." >&2
+        echo "Unsupported host arch. Must be x86_64, 386, arm, arm64, s390x, loong64 or ppc64le." >&2
         exit 1
         ;;
     esac
diff --git a/vendor/github.com/opencontainers/runc/libcontainer/system/syscall_linux_64.go b/vendor/github.com/opencontainers/runc/libcontainer/system/syscall_linux_64.go
index 1ed0dba1709..262450ad4cf 100644
--- a/vendor/github.com/opencontainers/runc/libcontainer/system/syscall_linux_64.go
+++ b/vendor/github.com/opencontainers/runc/libcontainer/system/syscall_linux_64.go
@@ -1,6 +1,6 @@
-//go:build linux && (arm64 || amd64 || mips || mipsle || mips64 || mips64le || ppc || ppc64 || ppc64le || riscv64 || s390x)
+//go:build linux && (arm64 || amd64 || loong64 || mips || mipsle || mips64 || mips64le || ppc || ppc64 || ppc64le || riscv64 || s390x)
 // +build linux
-// +build arm64 amd64 mips mipsle mips64 mips64le ppc ppc64 ppc64le riscv64 s390x
+// +build arm64 amd64 loong64 mips mipsle mips64 mips64le ppc ppc64 ppc64le riscv64 s390x
 
 package system
 
diff --git a/vendor/go.etcd.io/bbolt/bolt_loong64.go b/vendor/go.etcd.io/bbolt/bolt_loong64.go
new file mode 100644
index 00000000000..31c17c1d070
--- /dev/null
+++ b/vendor/go.etcd.io/bbolt/bolt_loong64.go
@@ -0,0 +1,10 @@
+//go:build loong64
+// +build loong64
+
+package bbolt
+
+// maxMapSize represents the largest mmap size supported by Bolt.
+const maxMapSize = 0xFFFFFFFFFFFF // 256TB
+
+// maxAllocSize is the size used when creating array pointers.
+const maxAllocSize = 0x7FFFFFFF
-- 
2.25.1

